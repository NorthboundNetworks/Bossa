Description: Add a command to override USB port autodetection
Author: Cristian Maglie <c.maglie@bug.st>
--- a/src/LinuxPortFactory.cpp
+++ b/src/LinuxPortFactory.cpp
@@ -44,6 +44,12 @@
         name.find("ttyACM") != std::string::npos)
         isUsb = true;
 
+    return create(name, isUsb);
+}
+
+SerialPort::Ptr
+LinuxPortFactory::create(const std::string& name, bool isUsb)
+{
     return SerialPort::Ptr(new PosixSerialPort(name, isUsb));
 }
 
--- a/src/LinuxPortFactory.h
+++ b/src/LinuxPortFactory.h
@@ -38,6 +38,7 @@
     virtual std::string next();
 
     virtual SerialPort::Ptr create(const std::string& name);
+    virtual SerialPort::Ptr create(const std::string& name, bool isUsb);
 
 private:
     std::string _empty;
--- a/src/OSXPortFactory.cpp
+++ b/src/OSXPortFactory.cpp
@@ -43,6 +43,12 @@
     if (name.find("usb") != std::string::npos)
         isUsb = true;
 
+    return create(name, isUsb);
+}
+
+SerialPort::Ptr
+OSXPortFactory::create(const std::string& name, bool isUsb)
+{
     return SerialPort::Ptr(new PosixSerialPort(name, isUsb));
 }
 
--- a/src/OSXPortFactory.h
+++ b/src/OSXPortFactory.h
@@ -38,6 +38,7 @@
     virtual std::string next();
 
     virtual SerialPort::Ptr create(const std::string& name);
+    virtual SerialPort::Ptr create(const std::string& name, bool isUsb);
 
 private:
     std::string _empty;
--- a/src/PortFactory.h
+++ b/src/PortFactory.h
@@ -34,6 +34,7 @@
     virtual std::string next() = 0;
 
     virtual SerialPort::Ptr create(const std::string& name) = 0;
+    virtual SerialPort::Ptr create(const std::string& name, bool isUsb) = 0;
 };
 
 #if defined(__WIN32__)
--- a/src/WinPortFactory.cpp
+++ b/src/WinPortFactory.cpp
@@ -45,6 +45,12 @@
         }
     }
 
+    return create(name, isUsb);
+}
+
+SerialPort::Ptr
+WinPortFactory::create(const std::string& name, bool isUsb)
+{
     return SerialPort::Ptr(new WinSerialPort(name, isUsb));
 }
 
--- a/src/WinPortFactory.h
+++ b/src/WinPortFactory.h
@@ -36,6 +36,7 @@
     std::string next();
 
     SerialPort::Ptr create(const std::string& name);
+    SerialPort::Ptr create(const std::string& name, bool isUsb);
 
 private:
     typedef DWORD WINAPI (*CM_Open_DevNode_Key)(DWORD, DWORD, DWORD, DWORD, ::PHKEY, DWORD);
--- a/src/bossac.cpp
+++ b/src/bossac.cpp
@@ -51,6 +51,8 @@
     bool info;
     bool debug;
     bool help;
+    bool forceUsb;
+    string forceUsbArg;
 
     int readArg;
     string portArg;
@@ -75,6 +77,7 @@
     security = false;
     info = false;
     help = false;
+    forceUsb = false;
 
     readArg = 0;
     bootArg = 1;
@@ -167,6 +170,11 @@
       "display this help text"
     },
     {
+      'U', "force_usb_port", &config.forceUsb,
+      { ArgRequired, ArgString, "true/false", { &config.forceUsbArg } },
+      "override USB port autodetection"
+    },
+    {
       'R', "reset", &config.reset,
       { ArgNone },
       "reset CPU (if supported)"
@@ -264,9 +272,28 @@
         if (config.debug)
             samba.setDebug(true);
 
+        bool isUsb = false;
+        if (config.forceUsb)
+        {
+            if (config.forceUsbArg.compare("true")==0)
+                isUsb = true;
+            else if (config.forceUsbArg.compare("false")==0)
+                isUsb = false;
+            else
+            {
+                fprintf(stderr, "Invalid USB value: %s\n", config.forceUsbArg.c_str());
+                return 1;
+            }
+        }
+
         if (config.port)
         {
-            if (!samba.connect(portFactory.create(config.portArg)))
+            bool res;
+            if (config.forceUsb)
+                res = samba.connect(portFactory.create(config.portArg, isUsb));
+            else
+                res = samba.connect(portFactory.create(config.portArg));
+            if (!res)
             {
                 fprintf(stderr, "No device found on %s\n", config.portArg.c_str());
                 return 1;
